{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyOFEar1E5es5ofG+NAo+YTm",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/GASPEEJ/Herramientas-para-la-ciencia-de-datos/blob/main/Taller_FInal_MODULO_8_IBM_GAJpart2ipynb.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install dash\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "RTMd1Cdwn0TU",
        "outputId": "383960c8-0aba-4318-8271-afa7d8698719"
      },
      "execution_count": 1,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Collecting dash\n",
            "  Downloading dash-2.18.2-py3-none-any.whl.metadata (10 kB)\n",
            "Requirement already satisfied: Flask<3.1,>=1.0.4 in /usr/local/lib/python3.10/dist-packages (from dash) (3.0.3)\n",
            "Collecting Werkzeug<3.1 (from dash)\n",
            "  Downloading werkzeug-3.0.6-py3-none-any.whl.metadata (3.7 kB)\n",
            "Requirement already satisfied: plotly>=5.0.0 in /usr/local/lib/python3.10/dist-packages (from dash) (5.24.1)\n",
            "Collecting dash-html-components==2.0.0 (from dash)\n",
            "  Downloading dash_html_components-2.0.0-py3-none-any.whl.metadata (3.8 kB)\n",
            "Collecting dash-core-components==2.0.0 (from dash)\n",
            "  Downloading dash_core_components-2.0.0-py3-none-any.whl.metadata (2.9 kB)\n",
            "Collecting dash-table==5.0.0 (from dash)\n",
            "  Downloading dash_table-5.0.0-py3-none-any.whl.metadata (2.4 kB)\n",
            "Requirement already satisfied: importlib-metadata in /usr/local/lib/python3.10/dist-packages (from dash) (8.5.0)\n",
            "Requirement already satisfied: typing-extensions>=4.1.1 in /usr/local/lib/python3.10/dist-packages (from dash) (4.12.2)\n",
            "Requirement already satisfied: requests in /usr/local/lib/python3.10/dist-packages (from dash) (2.32.3)\n",
            "Collecting retrying (from dash)\n",
            "  Downloading retrying-1.3.4-py3-none-any.whl.metadata (6.9 kB)\n",
            "Requirement already satisfied: nest-asyncio in /usr/local/lib/python3.10/dist-packages (from dash) (1.6.0)\n",
            "Requirement already satisfied: setuptools in /usr/local/lib/python3.10/dist-packages (from dash) (75.1.0)\n",
            "Requirement already satisfied: Jinja2>=3.1.2 in /usr/local/lib/python3.10/dist-packages (from Flask<3.1,>=1.0.4->dash) (3.1.4)\n",
            "Requirement already satisfied: itsdangerous>=2.1.2 in /usr/local/lib/python3.10/dist-packages (from Flask<3.1,>=1.0.4->dash) (2.2.0)\n",
            "Requirement already satisfied: click>=8.1.3 in /usr/local/lib/python3.10/dist-packages (from Flask<3.1,>=1.0.4->dash) (8.1.7)\n",
            "Requirement already satisfied: blinker>=1.6.2 in /usr/local/lib/python3.10/dist-packages (from Flask<3.1,>=1.0.4->dash) (1.9.0)\n",
            "Requirement already satisfied: tenacity>=6.2.0 in /usr/local/lib/python3.10/dist-packages (from plotly>=5.0.0->dash) (9.0.0)\n",
            "Requirement already satisfied: packaging in /usr/local/lib/python3.10/dist-packages (from plotly>=5.0.0->dash) (24.2)\n",
            "Requirement already satisfied: MarkupSafe>=2.1.1 in /usr/local/lib/python3.10/dist-packages (from Werkzeug<3.1->dash) (3.0.2)\n",
            "Requirement already satisfied: zipp>=3.20 in /usr/local/lib/python3.10/dist-packages (from importlib-metadata->dash) (3.21.0)\n",
            "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests->dash) (3.4.0)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests->dash) (3.10)\n",
            "Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests->dash) (2.2.3)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests->dash) (2024.8.30)\n",
            "Requirement already satisfied: six>=1.7.0 in /usr/local/lib/python3.10/dist-packages (from retrying->dash) (1.16.0)\n",
            "Downloading dash-2.18.2-py3-none-any.whl (7.8 MB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m7.8/7.8 MB\u001b[0m \u001b[31m21.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading dash_core_components-2.0.0-py3-none-any.whl (3.8 kB)\n",
            "Downloading dash_html_components-2.0.0-py3-none-any.whl (4.1 kB)\n",
            "Downloading dash_table-5.0.0-py3-none-any.whl (3.9 kB)\n",
            "Downloading werkzeug-3.0.6-py3-none-any.whl (227 kB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m228.0/228.0 kB\u001b[0m \u001b[31m10.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading retrying-1.3.4-py3-none-any.whl (11 kB)\n",
            "Installing collected packages: dash-table, dash-html-components, dash-core-components, Werkzeug, retrying, dash\n",
            "  Attempting uninstall: Werkzeug\n",
            "    Found existing installation: Werkzeug 3.1.3\n",
            "    Uninstalling Werkzeug-3.1.3:\n",
            "      Successfully uninstalled Werkzeug-3.1.3\n",
            "Successfully installed Werkzeug-3.0.6 dash-2.18.2 dash-core-components-2.0.0 dash-html-components-2.0.0 dash-table-5.0.0 retrying-1.3.4\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import dash\n",
        "from dash import dcc\n",
        "from dash import html\n",
        "from dash.dependencies import Input, Output\n",
        "import pandas as pd\n",
        "import plotly.express as px\n",
        "\n",
        "# Cargar los datos utilizando pandas\n",
        "data = pd.read_csv('https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-DV0101EN-SkillsNetwork/Data%20Files/historical_automobile_sales.csv')\n",
        "\n",
        "# Inicializar la aplicación Dash\n",
        "app = dash.Dash(__name__)\n",
        "\n",
        "# Set the title of the dashboard\n",
        "app.title = \"Automobile Sales Statistics Dashboard\"\n",
        "\n",
        "# Crear las opciones del menú desplegable\n",
        "dropdown_options = [\n",
        "    {'label': 'Yearly Statistics', 'value': 'Yearly Statistics'},\n",
        "    {'label': 'Recession Period Statistics', 'value': 'Recession Period Statistics'}\n",
        "]\n",
        "# Lista de años\n",
        "year_list = [i for i in range(1980, 2024, 1)]\n",
        "\n",
        "# Crear la estructura del layout de la aplicación\n",
        "app.layout = html.Div([\n",
        "    # Título de la dashboard\n",
        "    html.H1(\"Automobile Sales Statistics Dashboard\", style={'textAlign': 'center', 'color': '#503D36', 'font-size': 24}),\n",
        "\n",
        "    # Menú desplegable para seleccionar estadísticas\n",
        "    html.Div([\n",
        "        html.Label(\"Select Statistics:\"),\n",
        "        dcc.Dropdown(\n",
        "            id='dropdown-statistics',\n",
        "            options=dropdown_options,\n",
        "            value='Select Statistics',\n",
        "            placeholder='Select a report type',\n",
        "            style={'text-align-last': 'center', 'width': '80%', 'font-size': 20, 'padding': 3}\n",
        "        )\n",
        "    ]),\n",
        "\n",
        "    # Menú desplegable para seleccionar el año\n",
        "    html.Div([\n",
        "        html.Label(\"Select Year:\"),\n",
        "        dcc.Dropdown(\n",
        "            id='select-year',\n",
        "            options=[{'label': i, 'value': i} for i in year_list],\n",
        "            value=None,\n",
        "            placeholder='Select a year',\n",
        "            style={'text-align-last': 'center', 'width': '80%', 'font-size': 20, 'padding': 3}\n",
        "        )\n",
        "    ]),\n",
        "\n",
        "    # Contenedor para la visualización de los gráficos\n",
        "    html.Div(id='output-container', className='chart-grid', style={'display': 'flex'})\n",
        "])\n",
        "\n",
        "# Definir el callback para actualizar la habilitación del menú de años\n",
        "@app.callback(\n",
        "    Output('select-year', 'disabled'),\n",
        "    [Input('dropdown-statistics', 'value')]\n",
        ")\n",
        "def update_input_container(selected_statistics):\n",
        "    if selected_statistics == 'Yearly Statistics':\n",
        "        return False\n",
        "    else:\n",
        "        return True\n",
        "\n",
        "# Callback para actualizar los gráficos\n",
        "@app.callback(\n",
        "    Output('output-container', 'children'),\n",
        "    [Input('select-year', 'value'), Input('dropdown-statistics', 'value')]\n",
        ")\n",
        "def update_output_container(input_year, selected_statistics):\n",
        "    if selected_statistics == 'Recession Period Statistics':\n",
        "        # Filtrar los datos para los períodos de recesión\n",
        "        recession_data = data[data['Recession'] == 1]\n",
        "\n",
        "        # Gráfico 1: Ventas de automóviles promedio durante la recesión (por año)\n",
        "        yearly_rec = recession_data.groupby('Year')['Automobile_Sales'].mean().reset_index()\n",
        "        R_chart1 = dcc.Graph(\n",
        "            figure=px.line(yearly_rec,\n",
        "                x='Year', y='Automobile_Sales',\n",
        "                title=\"Average Automobile Sales fluctuation over Recession Period\")\n",
        "        )\n",
        "\n",
        "        # Gráfico 2: Promedio de ventas de vehículos por tipo de vehículo\n",
        "        average_sales = recession_data.groupby('Vehicle_Type')['Automobile_Sales'].mean().reset_index()\n",
        "        R_chart2 = dcc.Graph(\n",
        "            figure=px.bar(average_sales,\n",
        "                x='Vehicle_Type', y='Automobile_Sales',\n",
        "                title='Average Vehicles Sold by Vehicle Type during Recession')\n",
        "        )\n",
        "\n",
        "        # Gráfico 3: Participación del gasto publicitario por tipo de vehículo durante la recesión\n",
        "        exp_rec = recession_data.groupby('Vehicle_Type')['Advertising_Expenditure'].sum().reset_index()\n",
        "        R_chart3 = dcc.Graph(\n",
        "            figure=px.pie(exp_rec,\n",
        "                values='Advertising_Expenditure', names='Vehicle_Type',\n",
        "                title='Total Expenditure by Vehicle Type during Recession')\n",
        "        )\n",
        "\n",
        "        # Gráfico 4: Efecto de la tasa de desempleo sobre el tipo de vehículo y las ventas\n",
        "        unemp_rate = recession_data.groupby(['unemployment_rate', 'Vehicle_Type'])['Automobile_Sales'].mean().reset_index()\n",
        "        R_chart4 = dcc.Graph(\n",
        "            figure=px.bar(unemp_rate,\n",
        "                x='unemployment_rate', y='Automobile_Sales', color='Vehicle_Type',\n",
        "                title='Effect of unemployment rate on vehicle type and sales')\n",
        "        )\n",
        "\n",
        "        # Retornar los gráficos para la visualización\n",
        "        return [\n",
        "            html.Div(className='chart-item', children=[html.Div(children=R_chart1), html.Div(children=R_chart2)], style={'width': '50%'}),\n",
        "            html.Div(className='chart-item', children=[html.Div(children=R_chart3), html.Div(children=R_chart4)], style={'width': '50%'})\n",
        "        ]\n",
        "\n",
        "    elif selected_statistics == 'Yearly Statistics' and input_year:\n",
        "        # Filtrar los datos para el año seleccionado\n",
        "        yearly_data = data[data['Year'] == input_year]\n",
        "\n",
        "        # Gráfico 1: Ventas de automóviles por año\n",
        "        yas = data.groupby('Year')['Automobile_Sales'].mean().reset_index()\n",
        "        Y_chart1 = dcc.Graph(\n",
        "            figure=px.line(yas,\n",
        "                x='Year', y='Automobile_Sales',\n",
        "                title='Yearly Automobile Sales')\n",
        "        )\n",
        "\n",
        "        # Gráfico 2: Ventas totales mensuales de automóviles\n",
        "        Y_chart2 = dcc.Graph(\n",
        "            figure=px.line(yearly_data,\n",
        "                x='Month', y='Automobile_Sales',\n",
        "                title='Total Monthly Automobile Sales')\n",
        "        )\n",
        "\n",
        "        # Gráfico 3: Promedio de ventas de vehículos por tipo de vehículo en el año seleccionado\n",
        "        avr_vdata = yearly_data.groupby('Vehicle_Type')['Automobile_Sales'].mean().reset_index()\n",
        "        Y_chart3 = dcc.Graph(\n",
        "            figure=px.bar(avr_vdata,\n",
        "                x='Vehicle_Type', y='Automobile_Sales',\n",
        "                title='Average Vehicles Sold by Vehicle Type in {}'.format(input_year))\n",
        "        )\n",
        "\n",
        "        # Gráfico 4: Gasto publicitario total por tipo de vehículo\n",
        "        exp_data = yearly_data.groupby('Vehicle_Type')['Advertising_Expenditure'].sum().reset_index()\n",
        "        Y_chart4 = dcc.Graph(\n",
        "            figure=px.pie(exp_data,\n",
        "                values='Advertising_Expenditure', names='Vehicle_Type',\n",
        "                title='Total Advertisement Expenditure by Vehicle Type in {}'.format(input_year))\n",
        "        )\n",
        "\n",
        "        # Retornar los gráficos para la visualización\n",
        "        return [\n",
        "            html.Div(className='chart-item', children=[html.Div(children=Y_chart1), html.Div(children=Y_chart2)], style={'width': '50%'}),\n",
        "            html.Div(className='chart-item', children=[html.Div(children=Y_chart3), html.Div(children=Y_chart4)], style={'width': '50%'})\n",
        "        ]\n",
        "\n",
        "    else:\n",
        "        return None\n",
        "\n",
        "# Ejecutar la aplicación Dash\n",
        "if __name__ == '__main__':\n",
        "    app.run_server(debug=True)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 671
        },
        "id": "a06r4g6Pno8k",
        "outputId": "9337afcf-9bf6-4bd0-ea7d-93ff621c091f"
      },
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ],
            "application/javascript": [
              "(async (port, path, width, height, cache, element) => {\n",
              "    if (!google.colab.kernel.accessAllowed && !cache) {\n",
              "      return;\n",
              "    }\n",
              "    element.appendChild(document.createTextNode(''));\n",
              "    const url = await google.colab.kernel.proxyPort(port, {cache});\n",
              "    const iframe = document.createElement('iframe');\n",
              "    iframe.src = new URL(path, url).toString();\n",
              "    iframe.height = height;\n",
              "    iframe.width = width;\n",
              "    iframe.style.border = 0;\n",
              "    iframe.allow = [\n",
              "        'accelerometer',\n",
              "        'autoplay',\n",
              "        'camera',\n",
              "        'clipboard-read',\n",
              "        'clipboard-write',\n",
              "        'gyroscope',\n",
              "        'magnetometer',\n",
              "        'microphone',\n",
              "        'serial',\n",
              "        'usb',\n",
              "        'xr-spatial-tracking',\n",
              "    ].join('; ');\n",
              "    element.appendChild(iframe);\n",
              "  })(8050, \"/\", \"100%\", 650, false, window.element)"
            ]
          },
          "metadata": {}
        }
      ]
    }
  ]
}